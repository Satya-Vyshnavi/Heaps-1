Min Heap: 
T.c --> O(nlogk), S.c --> O(k).
class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();        
        for(int i =0; i<nums.length;i++){
            pq.add(nums[i]);
            if(pq.size() > k){
                pq.poll();
            }
        }
        return pq.poll();
    }
}
*******************************************************************
Max Heap:
T.c --> O(nlog(n-k)), S.c --> O(n-k).
class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)-> b-a);
        int min = Integer.MAX_VALUE;
        for(int i =0; i<nums.length;i++){
            pq.add(nums[i]);
            if(pq.size() > (nums.length-k)){
                min = Math.min(min,pq.poll());
            }
        }
        return min;
    }
}